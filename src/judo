#!/bin/sh

# Initialize default values.
port=8888
data_root="/usr/local/share/judo"
judo_config_home="$HOME/.config/judo"
project_name=$(basename $PWD | tr '[:upper:]' '[:lower:]')

if [ $# -gt 0 ]; then
    command=$1; shift
fi

# Read input arguments.
LONGOPTS=port:,name:,image:
OPTIONS=p:n:i:

ARGUMENTS=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name $0 -- $@)
if [[ ${PIPESTATUS[0]} -ne 0 ]]; then
    # getopt: wrong arguments
    exit 2
fi
eval set -- "$ARGUMENTS"

while true; do
    case $1 in
        -p|--port)
            port=$2
            shift 2
            ;;
        -n|--name)
            project_name=$2
            shift 2
            ;;
        -i|--image)
            image=$2
            shift 2
            ;;
        --)
            shift
            break
            ;;
    esac
done

case $command in
    init)
        touch .judo/config.sh .judo-plugins
        datafiles=$(ls -d "$data_root"/*)
        datafile_names=$(ls $data_root)
        cp -rp $judo_config_home/plugins .judo/developer-plugins
        cp $judo_config_home/config.sh .judo/developer-config.sh
        echo $datafiles | sed 's/ /\n/g' | xargs -I{} cp -rp {} .judo
        touch requirements.txt && chmod 604 requirements.txt
        if [ ! -d ".git" ]; then
            git init
            # Get up-to-date gitignore file for a jupyter notebook.
            git fetch --depth=1 git@github.com:jupyter/notebook.git
            git checkout FETCH_HEAD -- .gitignore
            git add requirements.txt
        fi
        # Use alternative image if specified.
        if [ ! -z $image ]; then
            alternative_image="--build-arg BASE_IMAGE=$image"
        fi
        docker build -t $project_name $alternative_image .judo
        cd .judo
        rm -r developer-plugins
        rm developer-config.sh
        echo $datafile_names | sed 's/ /\n/g' | xargs rm -r
        ;;

    plugins-list)
        echo "-- Installed plugins"
        ls $data_root'/plugins'
        echo "-- Activated plugins"
        source src/parent_dir.sh

        judo_dir=$(parent_judo_dir $PWD)

        if [ ! -z $judo_dir ] && [ -f $judo_dir/plugins ]; then
            project_plugins=$(cat $judo_dir/plugins | sed -E '/^#|^\s*$/d')
        fi

        if [ ! -z $project_plugins ]; then
            echo $project_plugins
        else
            developer_plugins=$(cat $judo_config_home/plugins | sed -E '/^#|^\s*$/d')
            if [ ! -z $developer_plugins ]; then
                echo $developer_plugins
            fi
        fi
        ;;


    run)
        docker run --pull never -e GRANT_SUDO=yes -it --rm -p $port:8888 -v $PWD:/home/jovyan/work --name $project_name $project_name
        ;;

    help|*)
        echo """
Create an isolated jupyter instance for development.
Available commands:
init:
    Initialize the Docker runtime and git repository.
    -n|--name: Specify the name of the Docker container. Default: The current directories name (lowercase).
    -i|--image: Use alternative base-image, instead of default jupyter/scipy-notebook.
run:
    Run the Docker container.
    -p|--port: Specify the port to connect to the container. Default: 8888
    -n|--name: Specify the name of the Docker container and image (Uses the same name). Default: The current directories name (lowercase).
help:
    View this help.
"""
        ;;
esac
